trigger:
  batch: true
  branches:
    include:
    - master

pr:
- master

schedules:
- cron: "0 8 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

jobs:
  - job: CLI
    strategy:
      matrix:
        windows:
          imageName: "windows-2019"
          nodeVersion: "12.x"
      maxParallel: 3
    pool:
      vmImage: $(imageName)
    variables:
      buildVersion: '4.8.0-preview.$(Build.BuildId)'
      _version: ${{coalesce(variables.version, variables.buildVersion)}}
      publisherId: 'Microsoft Corporation'
      extensionId: 'bot-deployment'
      extensionName: 'Bot Deployment'
      version: '4.8.0.$(Build.BuildId)'
    steps:
    #Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
      displayName: 'Tag Build with version number'
      inputs:
        tags: 'Version=$(_version)'

    - task: NodeTool@0
      displayName: 'Use Node $(nodeVersion)'
      inputs:
        versionSpec: $(nodeVersion)

    - task: Npm@1
      displayName: 'Install rush'
      inputs:
        command: custom
        verbose: false
        customCommand: 'install --global @microsoft/rush'

    - script: 'rush update'
      displayName: 'rush update'

    - script: 'rush build'
      displayName: 'rush build'

    - script: 'rush test'
      displayName: 'rush test'
    
    - script: 'rush posttest'
      displayName: 'rush posttest'

    - script: 'node ./common/scripts/version-and-pack.js --version $(_version)'
      displayName: 'Version and Pack'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: ./.output
        Contents: '**/*.tgz'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        artifactName: 'drop'

    - task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@2
      displayName: 'Install tfx-cli: v0.7.x'
      inputs:
        version: v0.7.x

    - task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageAzureDevOpsExtension@2
      displayName: 'Package Extension: packages/tasks/botDeploymentTask'
      inputs:
        rootFolder: packages/tasks/botDeploymentTask
        outputPath: '$(Build.ArtifactStagingDirectory)'
        publisherId: '$(publisherId)'
        extensionName: '$(extensionName)'
        extensionVersion: '$(version)'
        extensionVisibility: private
        extensionPricing: free

    - task: ms-devlabs.vsts-developer-tools-build-tasks.publish-extension-build-task.PublishAzureDevOpsExtension@2
      displayName: 'Publish Extension'
      inputs:
        connectedServiceName: MarketPlaceConnection
        fileType: vsix
        vsixFile: '$(Build.ArtifactStagingDirectory)/$(publisherId).$(extensionId)-$(version).vsix'
        publisherId: '$(publisherId)'
        updateTasksVersion: false
        extensionVisibility: public
        extensionPricing: free

    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'

    - script: 'rush report:coverage'
      displayName: 'rush report:coverage'
      enabled: false
